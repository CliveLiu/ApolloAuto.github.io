digraph "apollo::control::MPCController"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{apollo::control::MPCController\n|# vehicle_param_\l# control_interpolation_\l# ts_\l# cf_\l# cr_\l# wheelbase_\l# mass_\l# lf_\l# lr_\l# iz_\land 30 more...\l|+ MPCController()\l+ ~MPCController()\l+ Init()\l+ ComputeControlCommand()\l+ Reset()\l+ Stop()\l+ Name()\l# UpdateStateAnalyticalMatching()\l# UpdateMatrix()\l# GetLateralError()\l# ComputeLateralErrors()\l# ComputeLongitudinalErrors()\l# LoadControlConf()\l# InitializeFilters()\l# LogInitParameters()\l# ProcessLogs()\l# CloseLogFile()\l# LoadControlCalibrationTable()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{apollo::control::Controller\n||+ Controller()\l+ ~Controller()\l+ Init()\l+ ComputeControlCommand()\l+ Reset()\l+ Name()\l+ Stop()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classapollo_1_1control_1_1Controller.html",tooltip="base class for all controllers. "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #lateral_error_filter_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{apollo::control::MeanFilter\n||+ MeanFilter()\l+ MeanFilter()\l+ ~MeanFilter()\l+ Update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classapollo_1_1control_1_1MeanFilter.html",tooltip="The MeanFilter class is used to smoothen a series of noisy numbers, such as sensor data or the output..."];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #trajectory_analyzer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{apollo::control::Trajectory\lAnalyzer\n||+ TrajectoryAnalyzer()\l+ TrajectoryAnalyzer()\l+ ~TrajectoryAnalyzer()\l+ seq_num()\l+ QueryNearestPointByAbsoluteTime()\l+ QueryNearestPointByRelativeTime()\l+ QueryNearestPointByPosition()\l+ QueryMatchedPathPoint()\l+ ToTrajectoryFrame()\l+ trajectory_points()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classapollo_1_1control_1_1TrajectoryAnalyzer.html",tooltip="process point query and conversion related to trajectory "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #digital_filter_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{apollo::control::Digital\lFilter\n||+ DigitalFilter()\l+ DigitalFilter()\l+ ~DigitalFilter()\l+ Filter()\l+ set_denominators()\l+ set_numerators()\l+ set_coefficients()\l+ set_dead_zone()\l+ denominators()\l+ numerators()\l+ dead_zone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classapollo_1_1control_1_1DigitalFilter.html",tooltip="The DigitalFilter class is used to pass signals with a frequency lower than a certain cutoff frequenc..."];
}
